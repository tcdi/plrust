#!/usr/bin/env bash
set -xe

if [ -z "$STD_TARGETS" ]; then
    # if none specified, always build for these two targets
    STD_TARGETS="x86_64-postgres-linux-gnu aarch64-postgres-linux-gnu"
fi

# and depending on the platform we're building on, we need to set a linker flag for the other
# this'll get hairy when we support more platforms and we should port this script to Rust
if [ `uname -m` == "x86_64" ]; then
    if [[ -z "$CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER" ]] && [[ -z "$CARGO_TARGET_AARCH64_POSTGRES_LINUX_GNU_LINKER" ]]; then
        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        export CARGO_TARGET_AARCH64_POSTGRES_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
    fi
elif [ `uname -m` == "aarch64" ]; then
    if [[ -z "$CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER" ]] && [[ -z "$CARGO_TARGET_X86_64_POSTGRES_LINUX_GNU_LINKER" ]]; then
        export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-linux-gnu-gcc
        export CARGO_TARGET_X86_64_POSTGRES_LINUX_GNU_LINKER=x86_64-linux-gnu-gcc
    fi
else
    echo unsupported build platform: $(uname -m)
    exit 1
fi

# Make sure the tip of pgx's develop branch is used,
# until a release that has all the necessary features is cut.
cargo update -p pgx
cargo fetch
if [ "$CI" != true ]; then
    cargo install cargo-pgx \
     --version "0.7.2" \
     --locked # use the Cargo.lock in the pgx repo
fi

# Don't need to run cargo pgx init: user might already have set it up,
# and doing so risks clobbering their configuration.
# If they get an error, it's fairly self-explanatory.

(
    if cd postgrestd; then
        git pull
        git submodule update --init --recursive
    else
        git clone https://github.com/tcdi/postgrestd.git --branch "1.67.1" --recurse-submodules
        cd ./postgrestd
    fi
    rm --force rust-toolchain.toml
    STD_TARGETS="$STD_TARGETS" ./run clean
    STD_TARGETS="$STD_TARGETS" ./run install
)

cargo test --verbose --no-default-features --features "pg${PG_VER:-15} trusted"
