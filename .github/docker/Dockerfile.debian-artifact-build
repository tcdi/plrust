FROM debian:bullseye

# Args to pass in at build-time. Note that these are defaulted.
ARG PG_VER=15
ARG PLRUST_VER=0.0.0
ARG DEB_FILENAME=unknown-filename-not-set.deb

# Change this value if the entire build cache needs to be busted for any reason.
# Any random value can work here. UUIDs seemed to be a good choice.
ARG CACHE_KEY=2d912233-4423-48f9-b7ba-afc6b2ef3a44

SHELL ["/bin/bash", "-c"]

# Install system-level dependencies. Prefer to install Postgres from the official
# Postgres Debian packages
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        gnupg \
        lsb-release \
        wget && \
    sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' && \
    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg >/dev/null && \
    apt-get update -y -qq --fix-missing && \
    apt-get install -y --no-install-recommends \
        build-essential \
        clang \
        clang-11 \
        gcc \
        git \
        jq \
        libssl-dev \
        llvm-11 \
        make \
        postgresql-${PG_VER} \
        postgresql-server-dev-${PG_VER} \
        pkg-config \
        ruby && \
    rm -rf /var/lib/apt/lists/*

# Install fpm for the creation of the .deb file
RUN gem install --no-document fpm

# Set up permissions so that the postgres user can install the plrust plugin
RUN chmod a+rwx `$(which pg_config) --pkglibdir` `$(which pg_config) --sharedir`/extension

# Create the directory for the outgoing .deb package
RUN mkdir /out && chmod 777 /out

# The 'postgres' user is the default user that the official Postgres Debian packages create and set up
USER postgres
ENV USER postgres

# Install Rust
RUN wget -qO- https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain=1.67.1
ENV PATH="/var/lib/postgresql/.cargo/bin:${PATH}"

# Copy in plrust source
COPY --chown=${USER} . src/
WORKDIR /src

# Install the version of PGX that is dictated by Cargo.toml for this project
RUN PGX_VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[]|select(.name=="pgx")|.version') && \
    cargo install cargo-pgx --force --version "$PGX_VERSION"

# Necessary to build plrustc and company
RUN rustup component add llvm-tools-preview rustc-dev

# Build and install plrstuc
RUN cd /src/plrustc && ./build.sh && cp ../build/bin/plrustc ~/.cargo/bin

# Init cargo pgx
RUN cargo pgx init --pg${PG_VER} $(which pg_config)

# Build plrust with postgrestd. Architecture is determined by the host running this Dockerfile
RUN cd /src/plrust && STD_TARGETS="$(uname -m)-postgres-linux-gnu" ./build

# Use cargo pgx package to create everything necessary, placed into RELEASE_DIR below
RUN cd /src/plrust && cargo pgx package --features trusted

# This is the root of all the files necessary to package up into the .deb file. This specific path is generated by
# 'cargo pgx package' above
ENV RELEASE_DIR /src/target/release/plrust-pg${PG_VER}

# Create the plrustc location for our distribution, then copy in the plrustc program into the correct spot
RUN mkdir -p ${RELEASE_DIR}$HOME/.cargo/bin && \
    cp $HOME/.cargo/bin/plrustc ${RELEASE_DIR}$HOME/.cargo/bin

# The .deb file distribution needs to include the correct postgrestd toolchain files.
RUN cd $HOME/.rustup && \
    export TOOLCHAIN_DIR="$(pwd)/$(find * -type d -name '*postgres*' | head -n 1)" && \
    mkdir -p "${RELEASE_DIR}$TOOLCHAIN_DIR" && \
    cp -r "$TOOLCHAIN_DIR/." "${RELEASE_DIR}$TOOLCHAIN_DIR"

# Creates a PGX configuration Toml file, as it is required to build plrust user-defined functions
RUN mkdir -p ${RELEASE_DIR}$HOME/.pgx && \
    echo '[configs]' >> ${RELEASE_DIR}$HOME/.pgx/config.toml && \
    echo "pg${PG_VER}='$(command -v pg_config)'" >> ${RELEASE_DIR}$HOME/.pgx/config.toml

# Package everything up based on whatever's in RELEASE_DIR, and send the resulting
# .deb file to the /out directory
RUN cd ${RELEASE_DIR} && fpm \
    -s dir \
    -t deb \
    -n ${DEB_FILENAME} \
    -v ${PLRUST_VER} \
    --deb-no-default-config-files \
    -p /out/${DEB_FILENAME} \
    --deb-user postgres \
    -a native \
    .
