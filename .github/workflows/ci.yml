name: PL/Rust

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  # CARGO_LOG: cargo::core::compiler::fingerprint=info # Uncomment this to output compiler fingerprint info

jobs:
  plrust_arm64_amzn2:
    name: aarch64 tests (amzn2)
    runs-on: [self-hosted, linux, ARM64, launch_template_id__lt-0013395587950cb5d]
    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        # version: ["pg13", "pg14", "pg15"]
        version: ["pg14"]
        target: ["postgrestd"]
        # target: ["host", "postgrestd"]
      fail-fast: false

    env:
      AWS_CACHE_BUCKET: tcdi-ci-plrust-build-cache.private
      CACHE_KEY_VERSION: v0
      PLRUST_TRUSTED_PGRX_OVERRIDE: "pgrx = { path = '/home/ec2-user/actions-runner/_work/plrust/plrust/plrust-trusted-pgrx', package='plrust-trusted-pgrx' }"
      RUSTUP_HOME: /home/ec2-user/.rustup
      RUSTC_WRAPPER: sccache
      RUSTFLAGS: -Copt-level=0
      # SCCACHE_BIN_DIR: /home/ec2-user/.local/bin
      SCCACHE_CACHE_SIZE: 20G
      # SCCACHE_DIR: /home/ec2-user/.cache/sccache
      WORK_DIR: /home/ec2-user/actions-runner/_work/plrust/plrust
      CI: true

    steps:
    - uses: actions/checkout@v3

    - name: Generate cache filename checksum
      run: |
        cd $WORK_DIR
        shopt -s globstar
        checksum=$(cat **/Cargo.lock **/rust-toolchain.toml .github/workflows/ci.yml | sha256sum | awk '{print $1}')
        echo "CACHE_KEY_CHECKSUM=$checksum" >> $GITHUB_ENV

    - name: Set up (Linux) prerequisites and environment
      run: |
        echo ""
        echo "----- Print kernel info -----"
        uname -a
        echo ""

        echo "----- Set up dynamic variables -----"
        export PG_VER=$(echo ${{ matrix.version }} | cut -c 3-)
        echo "PG_VER=$PG_VER" >> $GITHUB_ENV
        echo "MAKEFLAGS=$MAKEFLAGS -j $(grep -c ^processor /proc/cpuinfo)" >> $GITHUB_ENV
        echo ""

        echo "----- Install system dependencies -----"
        #sudo amazon-linux-extras enable postgresql14
        #sudo yum clean metadata

        #sudo yum install -y \
        #  libpq \
        #  libpq-devel \
        #  postgresql \
        #  postgresql-server \
        #  postgresql-server-devel \
        #  openssl \
        #  openssl-devel \
        #  bison \
        #  flex \
        #  readline \
        #  readline-devel \
        #  clang
        #echo ""

        sudo yum install -y "postgresql$PG_VER" "postgresql$PG_VER-server" "postgresql$PG_VER-devel"
        export PATH="/usr/pgsql-$PG_VER/bin/:$PATH"

        echo "----- Set postgres permissions -----"
        sudo chmod a+rwx `$(which pg_config) --pkglibdir` `$(which pg_config) --sharedir`/extension
        echo ""

        # echo "----- Install sccache -----"
        # mkdir -p $SCCACHE_BIN_DIR
        # curl -L https://github.com/mozilla/sccache/releases/download/v0.5.0/sccache-v0.5.0-aarch64-unknown-linux-musl.tar.gz | tar xz
        # mv -f sccache-v0.5.0-aarch64-unknown-linux-musl/sccache $SCCACHE_BIN_DIR/sccache
        # chmod +x $SCCACHE_BIN_DIR/sccache
        # echo "$SCCACHE_BIN_DIR" >> $GITHUB_PATH
        # mkdir -p $SCCACHE_DIR
        # echo ""

        echo "----- Create artifacts directory -----"
        mkdir -p $HOME/artifacts
        echo ""

        # echo "----- Install rust via rustup -----"
        # curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        # source "$HOME/.cargo/env"
        # echo "PATH=$HOME/.cargo/bin:$PATH" >> $GITHUB_ENV
        # cargo --version

        cat $GITHUB_ENV

    - name: Load Cargo cache if available
      run: |
        # See <plrust-root>/.github/scripts/load_cache.sh for more details
        . $WORK_DIR/.github/scripts/load_cache.sh
        cargo_cache_key="plrust-arm64-amzn2-cargo-cache-$CACHE_KEY_VERSION-$CACHE_KEY_CHECKSUM.tar.lz4"
        loadcache $cargo_cache_key

    - name: Create protected files
      run: |
        sudo mkdir -p /var/ci-stuff/secret_rust_files
        sudo echo "const FOO:i32 = 7;" /var/ci-stuff/secret_rust_files/const_foo.rs
        sudo echo "const BAR:i32 = 8;" /var/ci-stuff/const_bar.rs
        sudo chmod -R 600 /var/ci-stuff/secret_rust_files
      if: matrix.target == 'postgrestd'

    - name: Load sccache cache if available
      run: |
        # See <plrust-root>/.github/scripts/load_cache.sh for more details
        . $WORK_DIR/.github/scripts/load_cache.sh
        sccache_key="plrust-arm64-amzn2-sccache-cache-$CACHE_KEY_VERSION-$CACHE_KEY_CHECKSUM.tar.lz4"
        loadcache $sccache_key

    - name: Start sccache server
      run: sccache --start-server && sccache --show-stats

    # See <plrust-root>/.github/scripts/install_cargo_pgrx.sh for more details
    - name: Install cargo-pgrx defined in plrust/Cargo.toml
      run: |
        . $WORK_DIR/.github/scripts/install_cargo_pgrx.sh
        install_cargo_pgrx

    - name: Print sccache stats
      run: sccache --show-stats

    - name: Install llvm-tools-preview
      run: rustup component add llvm-tools-preview rustc-dev

    - name: Test plrustc
      run: cd plrustc && cargo test -p plrustc

    - name: Print sccache stats
      run: sccache --show-stats

    - name: install plrustc
      run: cd plrustc && ./build.sh && cp ../build/bin/plrustc ~/.cargo/bin

    - name: Print sccache stats
      run: sccache --show-stats

    - name: Run cargo pgrx init
      run: cargo pgrx init --pg$PG_VER $(which pg_config)

    - name: Test PL/rust as "untrusted"
      if: matrix.target == 'host'
      run: cargo test --all --features "pg$PG_VER" --no-default-features

    - name: Test PL/rust as "trusted" (inc. postgrestd)
      if: matrix.target == 'postgrestd'
      run: cd plrust && STD_TARGETS="aarch64-postgres-linux-gnu" ./build && cargo test --verbose --no-default-features --features "pg$PG_VER trusted"

    - name: Print sccache stats (after build)
      run: sccache --show-stats

    - name: Stop sccache server
      run: sccache --stop-server || true

    - name: Store Cargo cache if applicable
      run: |
        . $WORK_DIR/.github/scripts/save_cache.sh
        # See <plrust-root>/.github/scripts/save_cache.sh for more details
        cargo_cache_key="plrust-arm64-amzn2-cargo-cache-$CACHE_KEY_VERSION-$CACHE_KEY_CHECKSUM.tar.lz4"
        cargo_dirs=( \
            $HOME/.cargo/ \
        )
        savecache $cargo_cache_key "${cargo_dirs[@]}"

    - name: Store sccache if applicable
      run: |
        # See <plrust-root>/.github/scripts/save_cache.sh for more details
        . $WORK_DIR/.github/scripts/save_cache.sh
        sccache_key="plrust-arm64-amzn2-sccache-cache-$CACHE_KEY_VERSION-$CACHE_KEY_CHECKSUM.tar.lz4"
        sccache_dirs=($SCCACHE_DIR)
        savecache $sccache_key "${sccache_dirs[@]}"

  plrust_x86_64:
    name: x86_64 tests
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'nogha')"

    env:
      PLRUST_TRUSTED_PGRX_OVERRIDE: "pgrx = { path = '/home/runner/work/plrust/plrust/plrust-trusted-pgrx', package='plrust-trusted-pgrx' }"
      RUSTC_WRAPPER: sccache
      RUSTFLAGS: -Copt-level=0
      SCCACHE_BIN_DIR: /home/runner/.local/bin
      SCCACHE_CACHE_SIZE: 20G
      SCCACHE_DIR: /home/runner/.cache/sccache

    strategy:
      matrix:
        # version: ["pg13", "pg14", "pg15"]
        version: ["pg13"]
        os: ["ubuntu-latest"]
        # it would be nice to other contributors to return "macos-11" to the above array
        # target: ["host", "postgrestd"]
        target: ["postgrestd"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - name: Set up (Linux) prerequisites and environment
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo ""

        echo "----- Set up dynamic variables -----"
        export PG_VER=$(echo ${{ matrix.version }} | cut -c 3-)
        echo "PG_VER=$PG_VER" >> $GITHUB_ENV
        echo "MAKEFLAGS=$MAKEFLAGS -j $(grep -c ^processor /proc/cpuinfo)" >> $GITHUB_ENV
        cat $GITHUB_ENV
        echo ""


        echo "----- Install sccache -----"
        mkdir -p $SCCACHE_BIN_DIR
        curl -L https://github.com/mozilla/sccache/releases/download/v0.5.0/sccache-v0.5.0-x86_64-unknown-linux-musl.tar.gz | tar xz
        mv -f sccache-v0.5.0-x86_64-unknown-linux-musl/sccache $SCCACHE_BIN_DIR/sccache
        chmod +x $SCCACHE_BIN_DIR/sccache
        echo "$SCCACHE_BIN_DIR" >> $GITHUB_PATH
        mkdir -p $SCCACHE_DIR
        echo ""

        echo "----- Remove old postgres -----"
        sudo apt remove -y postgres*
        echo ""

        echo "----- Set up PostgreSQL Apt repository -----"
        sudo apt-get install -y wget gnupg
        sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' && \
        wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg >/dev/null && \
        sudo apt-get update -y -qq --fix-missing
        echo ""

        echo "----- Install system dependencies and PostgreSQL version $PG_VER -----"
        sudo apt-get install -y \
          build-essential \
          clang \
          clang-11 \
          gcc \
          libssl-dev \
          libz-dev \
          llvm-11 \
          make \
          pkg-config \
          postgresql-$PG_VER \
          postgresql-server-dev-$PG_VER \
          strace \
          zlib1g-dev
        echo ""

        echo "----- Set up Postgres permissions -----"
        sudo chmod a+rwx `/usr/lib/postgresql/$PG_VER/bin/pg_config --pkglibdir` `/usr/lib/postgresql/$PG_VER/bin/pg_config --sharedir`/extension /var/run/postgresql/
        echo ""

        # echo "----- Install any Ruby gems necessary -----"
        # gem install --no-document toml

        # echo "----- Extract Rust toolchain version -----"
        # TOOLCHAIN_VER=$(ruby -e "require 'toml'; toolchain_data = TOML.load_file('/home/ec2-user/plrust/rust-toolchain.toml'); puts toolchain_data['toolchain']['channel']")
        # echo "TOOLCHAIN_VER=$TOOLCHAIN_VER" >> $GITHUB_ENV

        echo "----- Print env -----"
        env
        echo ""

        echo "----- Get cargo version -----"
        cargo --version
        echo ""

    - name: Set up (Mac) prerequisites and environment
      if: matrix.os == 'macos-11'
      run: |
        echo ""

        # https://stackoverflow.com/questions/57968497/how-do-i-set-an-env-var-with-a-bash-expression-in-github-actions/57969570#57969570
        echo "----- Getting pre-installed Postgres major version -----"
        PG_VER=$(pg_config --version | awk '{split($2,a,"."); print a[1]}')
        echo "PG_VER=$PG_VER" >> $GITHUB_ENV
        cat $GITHUB_ENV

        echo "----- Installing yq so .toml files can be parsed and queried -----"
        pip3 install yq
        echo ""

        echo "----- Setting up RUSTFLAGS found in .cargo/config -----"
        echo "RUSTFLAGS=$RUSTFLAGS $(tomlq --raw-output '.build.rustflags | join(" ")' .cargo/config)" >> $GITHUB_ENV
        cat $GITHUB_ENV
        echo ""

        echo "----- Set up Postgres permissions -----"
        sudo chmod a+rwx `$(which pg_config) --pkglibdir` `$(which pg_config) --sharedir`/extension
        ls -lath `$(which pg_config) --pkglibdir` `$(which pg_config) --sharedir`/extension
        echo ""

        echo "----- Output Cargo version -----"
        cargo --version
        echo ""

        echo "----- Outputting env -----"
        env
        echo ""

    # # Pre-clone postgrestd and submodules, so that **/Cargo.lock can be used to determine cache key below
    # - name: Pre-clone postgrestd and submodules
    #   run: |
    #     cd plrust && git clone https://github.com/tcdi/postgrestd.git --branch "$TOOLCHAIN_VER" --recurse-submodules

    - name: Cache cargo registry
      uses: actions/cache@v3
      continue-on-error: false
      with:
        path: |
          /home/runner/.cargo
        key: v0-plrust-x86_64-cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock', '**/rust-toolchain.toml', 'plrustc/.cargo/config.toml', '.github/workflows/ci.yml') }}

    - name: Cache sccache directory
      uses: actions/cache@v3
      continue-on-error: false
      with:
        path: |
          /home/runner/.cache/sccache
        key: v0-plrust-x86_64-sccache-${{ matrix.target }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock', '**/rust-toolchain.toml', 'plrustc/.cargo/config.toml', '.github/workflows/ci.yml') }}

    - name: Start sccache server
      run: sccache --start-server && sccache --show-stats

    - name: sccache dir
      run: ls -lath /home/runner/.cache/sccache

    # See <plrust-root>/.github/scripts/install_cargo_pgrx.sh for more details
    - name: Install cargo-pgrx defined in plrust/Cargo.toml
      run: |
        . $GITHUB_WORKSPACE/.github/scripts/install_cargo_pgrx.sh
        install_cargo_pgrx

    - name: Print sccache stats
      run: sccache --show-stats

    - name: Install llvm-tools-preview
      run: rustup component add llvm-tools-preview rustc-dev

    - name: Create protected files
      run: |
        sudo mkdir -p /var/ci-stuff/secret_rust_files
        sudo echo "const FOO:i32 = 7;" /var/ci-stuff/secret_rust_files/const_foo.rs
        sudo echo "const BAR:i32 = 8;" /var/ci-stuff/const_bar.rs
        sudo chmod -R 600 /var/ci-stuff/secret_rust_files
      if: matrix.target == 'postgrestd'

    - name: Test plrustc
      run: cd plrustc && cargo test -p plrustc

    - name: Print sccache stats
      run: sccache --show-stats

    - name: Install plrustc
      run: cd plrustc && time ./build.sh && cp ../build/bin/plrustc ~/.cargo/bin

    - name: Print sccache stats
      run: sccache --show-stats

    - name: Run 'cargo pgrx init' against system-level ${{ matrix.version }}
      run: cargo pgrx init --pg$PG_VER $(which pg_config)

    - name: Test PL/rust as "untrusted"
      if: matrix.target == 'host'
      run: time cargo test --all --features "pg$PG_VER" --no-default-features

    - name: Test PL/rust as "trusted" (inc. postgrestd)
      if: matrix.target == 'postgrestd'
      run: cd plrust && time STD_TARGETS="x86_64-postgres-linux-gnu" ./build && time cargo test --verbose --no-default-features --features "pg$PG_VER trusted"

    - name: Print sccache stats
      run: sccache --show-stats

    - name: sccache dir
      run: ls -lath /home/runner/.cache/sccache

    - name: Stop sccache server
      run: sccache --stop-server || true
