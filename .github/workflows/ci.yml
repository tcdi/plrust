name: PL/Rust

on:
  push:
    branches:
      - main
      - develop
      - brady/migrate-aarch64-ci-to-ubuntu
  pull_request:
    branches:
      - main
      - develop
      - brady/migrate-aarch64-ci-to-ubuntu
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  SCCACHE_VER: 0.5.4
  # CARGO_LOG: cargo::core::compiler::fingerprint=info # Uncomment this to output compiler fingerprint info

jobs:
  # A job for running tasks on an Amazon Linux 2 instance, which are self-hosted runners on another cloud service.
  # The image created for running these tasks already have a majority of the dependencies installed, such as system
  # libraries, sccache, github runners, rust, etc. This is to cut back on the amount of time it takes to launch a runner.
  # If something is missing, it can be added here or baked into a new image outside of Github Actions.
  # plrust_arm64_amzn2:
  #   name: aarch64 tests (amzn2)
  #   runs-on: [self-hosted, linux, ARM64, launch_template_id__lt-0013395587950cb5d]
  #   defaults:
  #     run:
  #       shell: bash

  #   strategy:
  #     matrix:
  #       version: ["pg13", "pg14", "pg15"]
  #       target: ["host", "postgrestd"]
  #     fail-fast: false

  #   # Note about environment variables: Even though a majority of these environment variables are baked into the runner image,
  #   # Github Actions seemingly runs self-hosted tasks in a different manner such that even baken-in environment variables are
  #   # removed. Howevever, they can be declared here and persist through all tasks. Assume that the home directory for the
  #   # runner is /home/ec2-user
  #   env:
  #     AWS_CACHE_BUCKET: tcdi-ci-plrust-build-cache.private
  #     CACHE_KEY_VERSION: v0
  #     CI: true
  #     PLRUST_TRUSTED_PGRX_OVERRIDE: "pgrx = { path = '/home/ec2-user/actions-runner/_work/plrust/plrust/plrust-trusted-pgrx', package='plrust-trusted-pgrx' }"
  #     RUSTUP_HOME: /home/ec2-user/.rustup
  #     RUSTC_WRAPPER: sccache
  #     RUSTFLAGS: -Copt-level=0 -Dwarnings
  #     SCCACHE_BIN_DIR: /home/ec2-user/.local/bin
  #     SCCACHE_CACHE_SIZE: 20G
  #     SCCACHE_DIR: /home/ec2-user/.cache/sccache
  #     SCCACHE_IDLE_TIMEOUT: 0
  #     WORK_DIR: /home/ec2-user/actions-runner/_work/plrust/plrust

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Generate cache filename checksum
  #     run: |
  #       cd $WORK_DIR
  #       shopt -s globstar
  #       checksum=$(cat **/Cargo.lock **/rust-toolchain.toml .github/workflows/ci.yml .cargo/config | sha256sum | awk '{print $1}')
  #       echo "CACHE_KEY_CHECKSUM=$checksum" >> $GITHUB_ENV

  #   - name: Set up (Linux) prerequisites and environment
  #     run: |
  #       echo ""
  #       echo "----- Print kernel info -----"
  #       uname -a
  #       echo ""

  #       echo "----- Set up dynamic variables -----"
  #       export PG_VER=$(echo ${{ matrix.version }} | cut -c 3-)
  #       echo "PG_VER=$PG_VER" >> $GITHUB_ENV
  #       echo "MAKEFLAGS=$MAKEFLAGS -j $(grep -c ^processor /proc/cpuinfo)" >> $GITHUB_ENV
  #       echo "$SCCACHE_BIN_DIR" >> $GITHUB_PATH
  #       echo "PATH=$HOME/.cargo/bin:$PATH" >> $GITHUB_ENV
  #       echo ""

  #       echo "----- Install system dependencies -----"
  #       # Add any extra dependencies here if necessary

  #       echo "----- Install PostgreSQL $PG_VER -----"
  #       sudo yum install -y "postgresql$PG_VER" "postgresql$PG_VER-server" "postgresql$PG_VER-devel"
  #       export PATH="/usr/pgsql-$PG_VER/bin/:$PATH"
  #       echo "/usr/pgsql-$PG_VER/bin/" >> $GITHUB_PATH

  #       echo "----- Set postgres permissions -----"
  #       sudo chmod a+rwx `$(which pg_config) --pkglibdir` `$(which pg_config) --sharedir`/extension
  #       echo ""

  #       echo "----- Create artifacts directory -----"
  #       mkdir -p $HOME/artifacts
  #       echo ""

  #       cat $GITHUB_ENV
  #       echo ""
  #       env

  #   - name: Load Cargo cache if available
  #     run: |
  #       # See <plrust-root>/.github/scripts/load_cache.sh for more details
  #       . $WORK_DIR/.github/scripts/load_cache.sh
  #       cargo_cache_key="plrust-arm64-amzn2-cargo-cache-$CACHE_KEY_VERSION-$CACHE_KEY_CHECKSUM.tar.lz4"
  #       loadcache $cargo_cache_key

  #   - name: Create protected files
  #     run: |
  #       sudo mkdir -p /var/ci-stuff/secret_rust_files
  #       sudo echo "const FOO:i32 = 7;" /var/ci-stuff/secret_rust_files/const_foo.rs
  #       sudo echo "const BAR:i32 = 8;" /var/ci-stuff/const_bar.rs
  #       sudo chmod -R 600 /var/ci-stuff/secret_rust_files
  #     if: matrix.target == 'postgrestd'

  #   - name: Load sccache cache if available
  #     run: |
  #       # See <plrust-root>/.github/scripts/load_cache.sh for more details
  #       . $WORK_DIR/.github/scripts/load_cache.sh
  #       sccache_key="plrust-arm64-amzn2-sccache-cache-$CACHE_KEY_VERSION-$CACHE_KEY_CHECKSUM.tar.lz4"
  #       loadcache $sccache_key

  #   - name: Start sccache server
  #     run: sccache --start-server && sccache --show-stats

  #   # See <plrust-root>/.github/scripts/install_cargo_pgrx.sh for more details
  #   - name: Install cargo-pgrx defined in plrust/Cargo.toml
  #     run: |
  #       . $WORK_DIR/.github/scripts/install_cargo_pgrx.sh
  #       install_cargo_pgrx

  #   - name: Print sccache stats
  #     run: sccache --show-stats

  #   - name: Install llvm-tools-preview
  #     run: rustup component add llvm-tools-preview rustc-dev

  #   - name: Test plrustc
  #     run: cd plrustc && cargo test -p plrustc

  #   - name: Print sccache stats
  #     run: sccache --show-stats

  #   - name: install plrustc
  #     run: cd plrustc && ./build.sh && cp ../build/bin/plrustc ~/.cargo/bin

  #   - name: Print sccache stats
  #     run: sccache --show-stats

  #   - name: Run cargo pgrx init
  #     run: cargo pgrx init --pg$PG_VER $(which pg_config)

  #   - name: Install PL/Rust as "trusted"
  #     if: matrix.target == 'postgrestd'
  #     run: cd plrust && STD_TARGETS="aarch64-postgres-linux-gnu" ./build && echo "\q" | cargo pgrx run "pg$PG_VER" --features "trusted"

  #   - name: Test PL/Rust package as "trusted"
  #     if: matrix.target == 'postgrestd'
  #     run: cd plrust && cargo test --no-default-features --features "pg$PG_VER trusted"

  #   - name: Run PL/Rust integration tests as "trusted"
  #     if: matrix.target == 'postgrestd'
  #     run: cd plrust && echo "\q" | cargo pgrx run "pg$PG_VER" --features "trusted" && cd ../plrust-tests && cargo test --no-default-features --features "pg$PG_VER trusted"

  #   - name: Install PL/Rust as "untrusted"
  #     if: matrix.target == 'host'
  #     run: cd plrust && STD_TARGETS="aarch64-postgres-linux-gnu" ./build && echo "\q" | cargo pgrx run "pg$PG_VER"

  #   - name: Test PL/Rust package as "untrusted"
  #     if: matrix.target == 'host'
  #     run: cd plrust && cargo test --no-default-features --features "pg$PG_VER"

  #   - name: Run PL/Rust integration tests as "untrusted"
  #     if: matrix.target == 'host'
  #     run: cd plrust && echo "\q" | cargo pgrx run "pg$PG_VER" && cd ../plrust-tests && cargo test --no-default-features --features "pg$PG_VER"

  #   - name: Print sccache stats (after build)
  #     run: sccache --show-stats

  #   - name: Stop sccache server
  #     run: sccache --stop-server || true

  #   - name: Store Cargo cache if applicable
  #     run: |
  #       . $WORK_DIR/.github/scripts/save_cache.sh
  #       # See <plrust-root>/.github/scripts/save_cache.sh for more details
  #       cargo_cache_key="plrust-arm64-amzn2-cargo-cache-$CACHE_KEY_VERSION-$CACHE_KEY_CHECKSUM.tar.lz4"
  #       cargo_dirs=( \
  #           $HOME/.cargo/ \
  #       )
  #       savecache $cargo_cache_key "${cargo_dirs[@]}"

  #   - name: Store sccache if applicable
  #     run: |
  #       # See <plrust-root>/.github/scripts/save_cache.sh for more details
  #       . $WORK_DIR/.github/scripts/save_cache.sh
  #       sccache_key="plrust-arm64-amzn2-sccache-cache-$CACHE_KEY_VERSION-$CACHE_KEY_CHECKSUM.tar.lz4"
  #       sccache_dirs=($SCCACHE_DIR)
  #       savecache $sccache_key "${sccache_dirs[@]}"

  plrust_arm64_ubuntu:
    name: arm64 tests on Ubuntu

    runs-on: [self-hosted, linux, ARM64, launch_template_id__lt-0726d9ff7411af069]
    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        # version: ["pg13", "pg14", "pg15", "pg16"]
        # target: ["host", "postgrestd"]
        version: ["pg13"]
        target: ["postgrestd"]
      fail-fast: false

    env:
      AWS_CACHE_BUCKET: tcdi-ci-plrust-build-cache.private
      CACHE_KEY_VERSION: v0
      CI: true
      PLRUST_TRUSTED_PGRX_OVERRIDE: "pgrx = { path = '/home/ubuntu/actions-runner/_work/plrust/plrust/plrust-trusted-pgrx', package='plrust-trusted-pgrx' }"
      RUSTUP_HOME: /home/ubuntu/.rustup
      RUSTC_WRAPPER: sccache
      RUSTFLAGS: -Copt-level=0 -Dwarnings
      SCCACHE_BIN_DIR: /home/ubuntu/.local/bin
      SCCACHE_CACHE_SIZE: 20G
      SCCACHE_DIR: /workdir/sccache
      SCCACHE_IDLE_TIMEOUT: 0
      WORK_DIR: /workdir/actions-runner/_work/plrust/plrust

    steps:
    - uses: actions/checkout@v3

    - name: Generate cache filename checksum
      run: |
        cd $WORK_DIR
        shopt -s globstar
        checksum=$(cat **/Cargo.lock **/rust-toolchain.toml .github/workflows/ci.yml .cargo/config | sha256sum | awk '{print $1}')
        echo "CACHE_KEY_CHECKSUM=$checksum" >> $GITHUB_ENV

    - name: Set up (Linux) prerequisites and environment
      run: |
        echo ""

        echo "----- Set up dynamic variables -----"
        export PG_VER=$(echo ${{ matrix.version }} | cut -c 3-)
        echo "PG_VER=$PG_VER" >> $GITHUB_ENV
        echo "MAKEFLAGS=$MAKEFLAGS -j $(grep -c ^processor /proc/cpuinfo)" >> $GITHUB_ENV
        cat $GITHUB_ENV
        echo ""


        echo "----- Install sccache -----"
        mkdir -p $SCCACHE_BIN_DIR
        curl -L "https://github.com/mozilla/sccache/releases/download/v$SCCACHE_VER/sccache-v0.5.4-x86_64-unknown-linux-musl.tar.gz" | tar xz
        mv -f "sccache-v$SCCACHE_VER-x86_64-unknown-linux-musl/sccache" "$SCCACHE_BIN_DIR/sccache"
        chmod +x "$SCCACHE_BIN_DIR/sccache"
        echo "$SCCACHE_BIN_DIR" >> "$GITHUB_PATH"
        mkdir -p "$SCCACHE_DIR"
        echo ""

        echo "----- Remove old postgres and libraries -----"
        sudo apt remove -y '^postgres.*' '^libpq.*' '^clang.*' '^llvm.*' '^libclang.*' '^libllvm.*' # '^mono-llvm.*'
        echo ""

        echo "----- Set up PostgreSQL Apt repository -----"
        sudo apt-get install -y wget gnupg
        sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
        wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg >/dev/null
        sudo apt-get update -y -qq --fix-missing
        echo ""

        echo "----- Install system dependencies and PostgreSQL version $PG_VER -----"
        sudo apt-get install -y \
          build-essential \
          clang-14 \
          gcc \
          libclang-14-dev \
          libssl-dev \
          libz-dev \
          llvm-14-dev \
          make \
          pkg-config \
          strace \
          zlib1g-dev
        echo ""

        echo "----- Print env -----"
        env
        echo ""

        echo "----- Get cargo version -----"
        cargo --version
        echo ""

  # plrust_x86_64:
  #   name: x86_64 tests
  #   runs-on: ${{ matrix.os }}
  #   if: "!contains(github.event.head_commit.message, 'nogha')"

  #   env:
  #     PLRUST_TRUSTED_PGRX_OVERRIDE: "pgrx = { path = '/home/runner/work/plrust/plrust/plrust-trusted-pgrx', package='plrust-trusted-pgrx' }"
  #     RUSTC_WRAPPER: sccache
  #     RUSTFLAGS: -Copt-level=0 -Dwarnings
  #     SCCACHE_BIN_DIR: /home/runner/.local/bin
  #     SCCACHE_CACHE_SIZE: 20G
  #     SCCACHE_DIR: /home/runner/.cache/sccache
  #     SCCACHE_IDLE_TIMEOUT: 0

  #   strategy:
  #     matrix:
  #       version: ["pg13", "pg14", "pg15", "pg16"]
  #       os: ["ubuntu-latest"]
  #       # it would be nice to other contributors to return "macos-11" to the above array
  #       target: ["host", "postgrestd"]
  #     fail-fast: false

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Set up (Linux) prerequisites and environment
  #     run: |
  #       echo ""

  #       echo "----- Set up dynamic variables -----"
  #       export PG_VER=$(echo ${{ matrix.version }} | cut -c 3-)
  #       echo "PG_VER=$PG_VER" >> $GITHUB_ENV
  #       echo "MAKEFLAGS=$MAKEFLAGS -j $(grep -c ^processor /proc/cpuinfo)" >> $GITHUB_ENV
  #       cat $GITHUB_ENV
  #       echo ""


  #       echo "----- Install sccache -----"
  #       mkdir -p $SCCACHE_BIN_DIR
  #       curl -L https://github.com/mozilla/sccache/releases/download/v0.5.0/sccache-v0.5.0-x86_64-unknown-linux-musl.tar.gz | tar xz
  #       mv -f sccache-v0.5.0-x86_64-unknown-linux-musl/sccache $SCCACHE_BIN_DIR/sccache
  #       chmod +x $SCCACHE_BIN_DIR/sccache
  #       echo "$SCCACHE_BIN_DIR" >> $GITHUB_PATH
  #       mkdir -p $SCCACHE_DIR
  #       echo ""

  #       echo "----- Remove old postgres -----"
  #       sudo apt remove -y '^postgres.*' '^libpq.*' '^clang.*' '^llvm.*' '^libclang.*' '^libllvm.*' '^mono-llvm.*'
  #       echo ""

  #       echo "----- Set up PostgreSQL Apt repository -----"
  #       sudo apt-get install -y wget gnupg
  #       sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' && \
  #       wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg >/dev/null && \
  #       sudo apt-get update -y -qq --fix-missing
  #       echo ""

  #       echo "----- Install system dependencies and PostgreSQL version $PG_VER -----"
  #       sudo apt-get install -y \
  #         build-essential \
  #         llvm-14-dev libclang-14-dev clang-14 \
  #         gcc \
  #         libssl-dev \
  #         libz-dev \
  #         make \
  #         pkg-config \
  #         strace \
  #         zlib1g-dev
  #       echo ""

  #       echo "----- Installed Packages -----"
  #       sudo apt list --installed
  #       echo ""

  #       echo "----- Print env -----"
  #       env
  #       echo ""

  #       echo "----- Get cargo version -----"
  #       cargo --version
  #       echo ""

  #   - name: Install release version of PostgreSQL
  #     run: |
  #       echo "----- Set up PostgreSQL Apt repository -----"
  #       sudo apt-get install -y wget gnupg
  #       sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
  #       wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
  #       sudo apt-get update -y -qq --fix-missing
  #       echo ""

  #       sudo apt-get install -y \
  #         postgresql-"$PG_VER" \
  #         postgresql-server-dev-"$PG_VER"

  #       echo "---- pg_config info ----"
  #       /usr/lib/postgresql/"$PG_VER"/bin/pg_config

  #   - name: Set up Postgres permissions
  #     run: sudo chmod a+rwx "$(/usr/lib/postgresql/"$PG_VER"/bin/pg_config --pkglibdir)" "$(/usr/lib/postgresql/"$PG_VER"/bin/pg_config --sharedir)"/extension /var/run/postgresql/

  #   - name: Cache cargo registry
  #     uses: actions/cache@v3
  #     continue-on-error: false
  #     with:
  #       path: |
  #         /home/runner/.cargo
  #       key: v0-plrust-x86_64-cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock', '**/rust-toolchain.toml', 'plrustc/.cargo/config.toml', '.github/workflows/ci.yml', '.cargo/config') }}

  #   - name: Cache sccache directory
  #     uses: actions/cache@v3
  #     continue-on-error: false
  #     with:
  #       path: |
  #         /home/runner/.cache/sccache
  #       key: v0-plrust-x86_64-sccache-${{ matrix.target }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock', '**/rust-toolchain.toml', 'plrustc/.cargo/config.toml', '.github/workflows/ci.yml', '.cargo/config') }}

  #   - name: Start sccache server
  #     run: sccache --start-server && sccache --show-stats

  #   - name: sccache dir
  #     run: ls -lath /home/runner/.cache/sccache

  #   # See <plrust-root>/.github/scripts/install_cargo_pgrx.sh for more details
  #   - name: Install cargo-pgrx defined in plrust/Cargo.toml
  #     run: |
  #       . $GITHUB_WORKSPACE/.github/scripts/install_cargo_pgrx.sh
  #       install_cargo_pgrx

  #   - name: Print sccache stats
  #     run: sccache --show-stats

  #   - name: Install llvm-tools-preview
  #     run: rustup component add llvm-tools-preview rustc-dev

  #   - name: Create protected files
  #     run: |
  #       sudo mkdir -p /var/ci-stuff/secret_rust_files
  #       sudo echo "const FOO:i32 = 7;" /var/ci-stuff/secret_rust_files/const_foo.rs
  #       sudo echo "const BAR:i32 = 8;" /var/ci-stuff/const_bar.rs
  #       sudo chmod -R 600 /var/ci-stuff/secret_rust_files
  #     if: matrix.target == 'postgrestd'

  #   - name: Test plrustc
  #     run: cd plrustc && cargo test -p plrustc

  #   - name: Print sccache stats
  #     run: sccache --show-stats

  #   - name: Test plrustc
  #     run: cd plrustc && cargo test

  #   - name: Install plrustc
  #     run: cd plrustc && ./build.sh && cp ../build/bin/plrustc ~/.cargo/bin

  #   - name: Print sccache stats
  #     run: sccache --show-stats

  #   - name: Run 'cargo pgrx init' against system-level ${{ matrix.version }}
  #     run: cargo pgrx init --pg$PG_VER $(which pg_config)

  #   - name: Install PL/Rust as "trusted"
  #     if: matrix.target == 'postgrestd'
  #     run: cd plrust && STD_TARGETS="x86_64-postgres-linux-gnu" ./build && echo "\q" | cargo pgrx run "pg$PG_VER" --features "trusted"

  #   - name: Test PL/Rust package as "trusted"
  #     if: matrix.target == 'postgrestd'
  #     run: cd plrust && cargo test --no-default-features --features "pg$PG_VER trusted"

  #   - name: Run PL/Rust integration tests as "trusted"
  #     if: matrix.target == 'postgrestd'
  #     run: cd plrust && echo "\q" | cargo pgrx run "pg$PG_VER" --features "trusted" && cd ../plrust-tests && cargo test --no-default-features --features "pg$PG_VER trusted"

  #   - name: Install PL/Rust as "untrusted"
  #     if: matrix.target == 'host'
  #     run: cd plrust && STD_TARGETS="x86_64-postgres-linux-gnu" ./build && echo "\q" | cargo pgrx run "pg$PG_VER"

  #   - name: Test PL/Rust package as "untrusted"
  #     if: matrix.target == 'host'
  #     run: cd plrust && cargo test --no-default-features --features "pg$PG_VER"

  #   - name: Run PL/Rust integration tests as "untrusted"
  #     if: matrix.target == 'host'
  #     run: cd plrust && echo "\q" | cargo pgrx run "pg$PG_VER" && cd ../plrust-tests && cargo test --no-default-features --features "pg$PG_VER"

  #   - name: Print sccache stats
  #     run: sccache --show-stats

  #   - name: sccache dir
  #     run: ls -lath /home/runner/.cache/sccache

  #   - name: Stop sccache server
  #     run: sccache --stop-server || true
