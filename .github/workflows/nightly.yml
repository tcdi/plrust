name: PL/Rust

# NOTE TO SELF: REMEMBER TO ADD WORKFLOW_DISPATCH
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  # CARGO_LOG: cargo::core::compiler::fingerprint=info # Uncomment this to output compiler fingerprint info

jobs:
  artifact_test:
    name: Test .deb Artifacts
    runs-on: [ubuntu-latest]
    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        pg_version: ["pg13", "pg14", "pg15"]
      fail-fast: false

    env:
      CI: true

    steps:
    - uses: actions/checkout@v3

    # The default installation of Docker on Github Actions runners are pretty outdated, as the artifact builder
    # Dockerfiles require a newer version of Docker that has heredoc support. This may not be necesssary in the future,
    # but it is definitely needed at the time of this writing.
    - name: Install newer version of Docker
      run: |
        echo "-- Remove existing installations of Docker --"
        sudo apt-get remove docker docker-engine docker.io containerd runc

        echo "-- Install new version -- "
        sudo apt-get update
        sudo apt-get install \
            ca-certificates \
            curl \
            gnupg

        sudo install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        sudo chmod a+r /etc/apt/keyrings/docker.gpg

        echo \
          "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

        sudo apt-get update

        sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    - name: Build and extract Debian .deb artifact via Docker
      run: |
        echo "-- Setting variables --"
        export PG_VER=$(echo ${{ matrix.pg_version}} | cut -c 3-)
        echo "PG_VER=$PG_VER" >> $GITHUB_ENV
        #export PLRUST_VER=$( echo "${{ github.ref_name }}" | sed -e s/^v// )

        echo "----- Install toml Rubygem -----"
        sudo gem install --no-document toml
        echo ""
        echo "----- Extract plrust version -----"

        # ruby <<EOF
        # require 'toml'
        # toml=TOML.load_file("#{ENV['GITHUB_WORKSPACE']}/plrust/Cargo.toml")
        # if ver=toml['package']['version']
        #   File.open('/tmp/.plrust-ver', 'w') { |file| file.write(ver) }
        # else
        #   raise 'Could not determine plrust version. Is plrust/Cargo.toml missing or malformed?'
        # end
        # EOF
        # echo ""

        PLRUST_VER=$(cargo metadata --format-version 1 | jq -r '.packages[]|select(.name=="plrust")|.version')

        echo "-- Building artifact via Docker --"
        docker build \
          --build-arg PG_VER=$PG_VER \
          --build-arg PLRUST_VER=$PLRUST_VER\
          -f .github/docker/Dockerfile.debian-artifact-build \
          -t plrust-debian \
          .

        echo "-- Creating container --"
        container_id=$(docker create plrust-debian)

        echo "-- Extracting file from container --"
        docker cp $container_id:/out /home/runner

        echo "-- Destroying container --"
        docker rm -v $container_id

    - name: Install official version of PostgreSQL and supporting apps/libraries
      run: |
        echo "----- Remove old postgres -----"
        sudo apt remove -y postgres*
        echo ""

        echo "----- Set up PostgreSQL Apt repository -----"
        sudo apt-get install -y wget gnupg
        sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' && \
        wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg >/dev/null && \
        sudo apt-get update -y -qq --fix-missing
        echo ""

        echo "----- Install system dependencies and PostgreSQL version $PG_VER -----"
        sudo apt-get install -y \
          build-essential \
          clang \
          clang-11 \
          gcc \
          libssl-dev \
          libz-dev \
          llvm-11 \
          make \
          pkg-config \
          postgresql-$PG_VER \
          postgresql-server-dev-$PG_VER \
          strace \
          zlib1g-dev
        echo ""

        echo "----- Set up Postgres permissions -----"
        sudo chmod a+rwx `/usr/lib/postgresql/$PG_VER/bin/pg_config --pkglibdir` `/usr/lib/postgresql/$PG_VER/bin/pg_config --sharedir`/extension /var/run/postgresql/
        echo ""

        echo "----- Extract Rust toolchain version from rust-toolchain.toml -----"
        ruby <<EOF
        require 'toml'
        toml=TOML.load_file("#{ENV['GITHUB_WORKSPACE']}/rust-toolchain.toml")
        if ver=toml['toolchain']['channel']
          File.open('/tmp/.toolchain-ver', 'w') { |file| file.write(ver) }
        else
          raise 'Could not determine toolchain channel version. Is rust-toolchain.toml missing or malformed?'
        end
        EOF
        echo ""

        # sudo su -l - postgres

        echo "----- Install Rust and components -----"
        #TOOLCHAIN_VER=$(</tmp/.toolchain-ver) && wget -qO- https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain=$TOOLCHAIN_VER
        runuser -l postgres -c 'TOOLCHAIN_VER=$(</tmp/.toolchain-ver) && wget -qO- https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain=$TOOLCHAIN_VER'

        # TOOLCHAIN_VER=$(</tmp/.toolchain-ver) && rustup install $TOOLCHAIN_VER
        # rustup component add llvm-tools-preview rustc-dev
        runuser -l postgres -c 'rustup component add llvm-tools-preview rustc-dev'

    - name: Install pl/Rust Debian package
      run: |
        FILE=$(ls /home/runner/out/*.deb | head -n 1)
        sudo apt install -y $FILE

    - name: Set up PostgreSQL configuration and restart service
      run: |
        # Set up host based auth. *DO NOT* use this in production!
        echo 'local all all trust' > /etc/postgresql/$PG_VER/main/pg_hba.conf
        echo 'host all all 0.0.0.0/0 trust' >> /etc/postgresql/$PG_VER/main/pg_hba.conf

        # Set up plrust configuration options
        echo "shared_preload_libraries='plrust'" >> /etc/postgresql/$PG_VER/main/postgresql.conf
        echo "plrust.work_dir='/tmp'" >>/etc/postgresql/$PG_VER/main/postgresql.conf

        sudo service postgresql restart
