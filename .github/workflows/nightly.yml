name: PL/Rust nightly builds

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

# CODE REVIEW: Ensure this event setup is used and not on push/PR below!
# CODE REVIEW: Ensure this event setup is used and not on push/PR below!
# CODE REVIEW: Ensure this event setup is used and not on push/PR below!
# on:
#   schedule:
#     - cron: '0 7 * * *'
#   workflow_dispatch:

env:
  RUST_BACKTRACE: 1

jobs:
  # deb_artifact_test_x86_64:
  #   name: (nightly) Test .deb Artifacts x86_64
  #   runs-on: [ubuntu-latest]
  #   defaults:
  #     run:
  #       shell: bash

  #   strategy:
  #     matrix:
  #       pg_version: ["pg13", "pg14", "pg15"]
  #     fail-fast: false

  #   env:
  #     CI: true

  #   steps:
  #   - uses: actions/checkout@v3

  #   # The default installation of Docker on Github Actions runners are pretty outdated, as the artifact builder
  #   # Dockerfiles require a newer version of Docker that has heredoc support. This may not be necesssary in the future,
  #   # but it is definitely needed at the time of this writing.
  #   - name: Install newer version of Docker
  #     run: |
  #       echo "-- Remove existing installations of Docker --"
  #       sudo apt-get remove docker docker-engine docker.io containerd runc

  #       echo "-- Install new version -- "
  #       sudo apt-get update
  #       sudo apt-get install \
  #           ca-certificates \
  #           curl \
  #           gnupg

  #       sudo install -m 0755 -d /etc/apt/keyrings
  #       curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  #       sudo chmod a+r /etc/apt/keyrings/docker.gpg

  #       echo \
  #         "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  #         "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  #         sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  #       sudo apt-get update

  #       sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

  #   - name: Build and extract Debian .deb artifact via Docker
  #     run: |
  #       echo "-- Setting variables --"
  #       export PG_VER=$(echo ${{ matrix.pg_version}} | cut -c 3-)
  #       echo "PG_VER=$PG_VER" >> $GITHUB_ENV
  #       #export PLRUST_VER=$( echo "${{ github.ref_name }}" | sed -e s/^v// )

  #       echo "----- Install toml Rubygem -----"
  #       sudo gem install --no-document toml
  #       echo ""

  #       echo "----- Extract plrust version -----"
  #       PLRUST_VER=$(cargo metadata --format-version 1 | jq -r '.packages[]|select(.name=="plrust")|.version')
  #       echo ""

  #       echo "----- Build artifact via Docker -----"
  #       docker build \
  #         --build-arg PG_VER=$PG_VER \
  #         --build-arg PLRUST_VER=$PLRUST_VER\
  #         -f .github/docker/Dockerfile.debian-artifact-build \
  #         -t plrust-debian \
  #         .
  #       echo ""

  #       echo "-- Creating container --"
  #       container_id=$(docker create plrust-debian)
  #       echo ""

  #       echo "-- Extracting file from container --"
  #       docker cp $container_id:/out /home/runner
  #       echo ""

  #       echo "-- Destroying container --"
  #       docker rm -v $container_id
  #       echo ""

  #   - name: Install official version of PostgreSQL and supporting apps/libraries
  #     run: |
  #       echo "----- Remove old postgres -----"
  #       sudo apt remove -y postgres*
  #       echo ""

  #       echo "----- Set up PostgreSQL Apt repository -----"
  #       sudo apt-get install -y wget gnupg
  #       sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' && \
  #       wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg >/dev/null && \
  #       sudo apt-get update -y -qq --fix-missing
  #       echo ""

  #       echo "----- Install system dependencies and PostgreSQL version $PG_VER -----"
  #       sudo apt-get install -y \
  #         build-essential \
  #         clang \
  #         clang-11 \
  #         gcc \
  #         libssl-dev \
  #         libz-dev \
  #         llvm-11 \
  #         make \
  #         pkg-config \
  #         postgresql-$PG_VER \
  #         postgresql-server-dev-$PG_VER \
  #         strace \
  #         zlib1g-dev
  #       echo ""

  #       echo "----- Set up Postgres permissions -----"
  #       sudo chmod a+rwx `/usr/lib/postgresql/$PG_VER/bin/pg_config --pkglibdir` `/usr/lib/postgresql/$PG_VER/bin/pg_config --sharedir`/extension /var/run/postgresql/
  #       echo ""

  #   - name: Set up rust and components for postgres user
  #     run: |
  #       echo "----- Extract Rust toolchain version from rust-toolchain.toml -----"
  #       ruby <<EOF
  #       require 'toml'
  #       toml=TOML.load_file("#{ENV['GITHUB_WORKSPACE']}/rust-toolchain.toml")
  #       if ver=toml['toolchain']['channel']
  #         File.open('/tmp/.toolchain-ver', 'w') { |file| file.write(ver) }
  #       else
  #         raise 'Could not determine toolchain channel version. Is rust-toolchain.toml missing or malformed?'
  #       end
  #       EOF
  #       echo ""

  #       echo "----- Install Rust and components for postgres user -----"
  #       sudo runuser -l postgres -c 'TOOLCHAIN_VER=$(</tmp/.toolchain-ver) && wget -qO- https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain=$TOOLCHAIN_VER'
  #       sudo runuser -l postgres -c 'rustup component add llvm-tools-preview rustc-dev'
  #       echo ""

  #   - name: Install pl/Rust Debian package
  #     run: |
  #       FILE=$(ls /home/runner/out/*.deb | head -n 1)
  #       APK_BASE=$(basename $FILE)
  #       mv $FILE /tmp

  #       sudo apt install -y /tmp/$APK_BASE

  #   - name: Set up PostgreSQL configuration and restart service
  #     run: |
  #       # NOTE: DO NOT USE ANY OF THIS IN A PRODUCTION SYSTEM!
  #       echo "----- Setting up host-based auth -----"
  #       echo 'local all all trust' | sudo tee /etc/postgresql/$PG_VER/main/pg_hba.conf >/dev/null
  #       echo 'host all all 0.0.0.0/0 trust' | sudo tee -a /etc/postgresql/$PG_VER/main/pg_hba.conf >/dev/null

  #       echo "----- Setting plrust configuration -----"
  #       echo "shared_preload_libraries='plrust'" | sudo tee -a /etc/postgresql/$PG_VER/main/postgresql.conf >/dev/null
  #       echo "plrust.work_dir='/tmp'" | sudo tee -a /etc/postgresql/$PG_VER/main/postgresql.conf >/dev/null

  #       echo "----- Ensure Postgres is listening to port 5432 -----"
  #       sudo perl -pi -e 's/^port\s?=.*/port = 5432/' /etc/postgresql/$PG_VER/main/postgresql.conf

  #       echo "----- Restarting postgresql -----"
  #       sudo service postgresql restart

  #   - name: Create pl/Rust extension and run a function
  #     run: |
  #       sudo runuser -l postgres -c 'psql -c "CREATE EXTENSION IF NOT EXISTS plrust;"'
  #       sudo runuser -l postgres -c "psql -c 'CREATE FUNCTION plrust.one() RETURNS INT LANGUAGE plrust AS \$\$ Ok(Some(1)) \$\$;'"
  #       sudo runuser -l postgres -c 'psql -c "SELECT * FROM plrust.one();"'

  dockerfile_try_x86_64:
    name: (nightly) Test Dockerfile.try x86_64
    runs-on: [ubuntu-latest]
    defaults:
      run:
        shell: bash

    # strategy:
    #   matrix:
    #     pg_version: ["pg13", "pg14", "pg15"]
    #   fail-fast: false

    env:
      CI: true

    steps:
    - uses: actions/checkout@v3

    # The default installation of Docker on Github Actions runners are pretty outdated, as the artifact builder
    # Dockerfiles require a newer version of Docker that has heredoc support. This may not be necesssary in the future,
    # but it is definitely needed at the time of this writing.
    - name: Install newer version of Docker
      run: |
        echo "-- Remove existing installations of Docker --"
        sudo apt-get remove docker docker-engine docker.io containerd runc

        echo "-- Install new version -- "
        sudo apt-get update
        sudo apt-get install \
            ca-certificates \
            curl \
            gnupg

        sudo install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        sudo chmod a+r /etc/apt/keyrings/docker.gpg

        echo \
          "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

        sudo apt-get update

        sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    - name: Install Postgres client
      run: |
        echo "----- Remove old postgres -----"
        sudo apt remove -y postgres*
        echo ""

        echo "----- Set up PostgreSQL Apt repository -----"
        sudo apt-get install -y wget gnupg
        sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' && \
        wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg >/dev/null && \
        sudo apt-get update -y -qq --fix-missing
        echo ""

        sudo apt install -y postgresql-client-15

    - name: Build container from Dockerfile.try
      run: docker build -f Dockerfile.try -t tcdi/try-plrust .

    # - name: Setup tunnel
    #   uses: joshlarsen/ssh-tunnel-action@main
    #   with:
    #     timeout: 1h
    #     ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
    #     ngrok_token: ${{ secrets.NGROK_TOKEN }}

    - name: Run container as server and try function
      run: |
        sudo docker run --detach -p 5432:5432 tcdi/try-plrust server
        sudo docker ps
        psql -h 127.0.0.1 -U postgres -c 'CREATE FUNCTION plrust.one() RETURNS INT LANGUAGE plrust AS $$ Ok(Some(1)) $$;'
        psql -h 127.0.0.1 -U postgres -c 'SELECT * FROM plrust.one()'
