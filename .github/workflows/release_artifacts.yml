name: Build release artifacts

on:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_deb:
    name: Build x86_64 Debian artifacts

    runs-on: ubuntu-latest

    strategy:
      matrix:
        pg_version: [pg13, pg14, pg15]

    steps:
    - uses: actions/checkout@v3

    - name: Build and extract Debian .deb artifact via Docker
      run: |
        echo "-- Setting variables --"
        export PG_VER=$(echo ${{ matrix.pg_version}} | cut -c 3-)
        export PLRUST_VER=$( echo "${{ github.ref_name }}" | sed -e s/^v// )
        export DEB_FILENAME="plrust-trusted-$PLRUST_VER-debian-pg$PG_VER-x86_64.deb"

        echo "-- Building artifact via Docker --"
        docker build \
          --build-arg PG_VER=$PG_VER \
          --build-arg PLRUST_VER=$PLRUST_VER\
          --build-arg DEB_FILENAME=$DEB_FILENAME \
          -f .github/docker/Dockerfile.debian-artifact-build \
          -t plrust-debian \
          .

        echo "-- Creating container --"
        container_id=$(docker create plrust-debian)

        echo "-- Extracting file from container --"
        docker cp $container_id:/out/$DEB_FILENAME /home/runner/$DEB_FILENAME

        echo "-- Destroying container --"
        docker rm -v $container_id

    - name: Upload Debian .deb artifact
      uses: softprops/action-gh-release@v1
      with:
        files: /home/runner/plrust*.deb

# jobs:
#   setup:
#     runs-on: ubuntu-latest
#     steps:
#       - run: ./setup_server.sh
#   build:
#     needs: setup
#     runs-on: ubuntu-latest
#     steps:
#       - run: ./build_server.sh
#   test:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - run: ./test_server.sh

# ------
# jobs.<job_id>.strategy.matrix
#

# jobs:
#   example_matrix:
#     strategy:
#       matrix:
#         version: [10, 12, 14]
#     steps:
#       - uses: actions/setup-node@v3
#         with:
#           node-version: ${{ matrix.version }}



  spin_up_aarch64_instances:
    name: Spin up aarch64 runner instances

    strategy:
      matrix:
        pg_version: [pg13, pg14, pg15]

    permissions:
      id-token: write # Required for requesting OCDI JWTs
      contents: read  # This is required for actions/checkout

    runs-on: ubuntu-latest

    steps:
    # - uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: us-east-2
        role-to-assume: arn:aws:iam::950481341027:role/github_oidc_iam_role
        role-session-name: GithubPlrustSession

    - name: Launch runner instance
      run: aws ec2 run-instances --launch-template LaunchTemplateId=lt-0bad2911d6aad1b0d

  build_deb_artifacts:
    name: Build aarch64 Debian artifacts
    needs: spin_up_aarch64_instances
    runs-on: [self-hosted, linux, ARM64, plrust_artifacts]

    strategy:
      matrix:
        pg_version: [pg13, pg14, pg15]

    steps:
      - uses: actions/checkout@v3

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              ca-certificates \
              curl \
              gnupg

          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg

          echo \
            "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          sudo apt-get update

          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

          # Set up docker to point to the EBS volume

          sudo service docker stop

          echo '{"data-root": "/workdir/.dockerdata"}' | sudo tee -a /etc/docker/daemon.json > /dev/null

          sudo service docker start

      - name: Build and extract Debian .deb artifact via Docker
        run: |
          echo "-- Setting variables --"
          export PG_VER=$(echo ${{ matrix.pg_version}} | cut -c 3-)
          export PLRUST_VER=$( echo "${{ github.ref_name }}" | sed -e s/^v// )
          export ARCH=aarch64
          export DEB_FILENAME="plrust-trusted-$PLRUST_VER-debian-pg$PG_VER-$ARCH.deb"

          echo "-- Building artifact via Docker --"
          sudo docker build \
            --build-arg PG_VER=$PG_VER \
            --build-arg PLRUST_VER=$PLRUST_VER \
            --build-arg ARCH=$ARCH \
            --build-arg DEB_FILENAME=$DEB_FILENAME \
            -f .github/docker/Dockerfile.debian-artifact-build \
            -t plrust-artifact-debian \
            .

          echo "-- Creating container --"
          container_id=$(sudo docker create plrust-artifact-debian)

          echo "-- Extracting file from container --"
          sudo docker cp $container_id:/out/$DEB_FILENAME /home/ubuntu/$DEB_FILENAME

          echo "-- Destroying container --"
          sudo docker rm -v $container_id

      - name: Upload Debian .deb artifact
        uses: softprops/action-gh-release@v1
        with:
          files: /home/ubuntu/*.deb
